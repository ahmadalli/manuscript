"use strict";(self.webpackChunkpublic_notes=self.webpackChunkpublic_notes||[]).push([[3850],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(a),u=n,h=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return a?r.createElement(h,i(i({ref:t},d),{},{components:a})):r.createElement(h,i({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},444:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:10},i="Oh Shit, Perl",l={unversionedId:"tech/oh-shit-x/perl",id:"tech/oh-shit-x/perl",title:"Oh Shit, Perl",description:"Operators",source:"@site/docs/0100-tech/060-oh-shit-x/010-perl.md",sourceDirName:"0100-tech/060-oh-shit-x",slug:"/tech/oh-shit-x/perl",permalink:"/tech/oh-shit-x/perl",draft:!1,editUrl:"https://github.com/ahmadalli/public-notes/edit/main/docs/0100-tech/060-oh-shit-x/010-perl.md",tags:[],version:"current",lastUpdatedBy:"ahmadali shafiee",lastUpdatedAt:1692395898,formattedLastUpdatedAt:"Aug 18, 2023",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Oh Shit, X",permalink:"/tech/oh-shit-x/"},next:{title:"Problems and Questions",permalink:"/problems-and-questions"}},s={},p=[{value:"Operators",id:"operators",level:2},{value:"<code>==</code>",id:"",level:3},{value:"<code>+</code>",id:"-1",level:3},{value:"q and qq",id:"q-and-qq",level:3},{value:"&lt;=&gt;",id:"-2",level:3},{value:"Arrays, Hashes, and Lists",id:"arrays-hashes-and-lists",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"oh-shit-perl"},"Oh Shit, Perl"),(0,n.kt)("h2",{id:"operators"},"Operators"),(0,n.kt)("p",null,"Perl has ",(0,n.kt)("a",{parentName:"p",href:"https://perldoc.perl.org/perlop"},"a lot of operators"),", and some of them are a bit weird. Here are some of them:"),(0,n.kt)("h3",{id:""},(0,n.kt)("inlineCode",{parentName:"h3"},"==")),(0,n.kt)("p",null,"These are all ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-perl"},'1 == 1\n1 == 1.0\n1 == "1"\n1 == "1.0"\n1 == "a1.0aa\\n"\n"foo" == "bar"; # because why not?\n')),(0,n.kt)("p",null,"This happens because ",(0,n.kt)("inlineCode",{parentName:"p"},"==")," is for numbers only, and strings without any numbers in them would be casted to ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),", and so in Perl's world ",(0,n.kt)("inlineCode",{parentName:"p"},'"foo" == "bar"'),". For strings ",(0,n.kt)("inlineCode",{parentName:"p"},"eq")," should be used instead."),(0,n.kt)("h3",{id:"-1"},(0,n.kt)("inlineCode",{parentName:"h3"},"+")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"+")," is for numbers which is why ",(0,n.kt)("inlineCode",{parentName:"p"},"string")," + ",(0,n.kt)("inlineCode",{parentName:"p"},"int")," returns int, even if the string isn't completely made of numbers:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-perl"},'print "123aaa" + 2; # this will return 125\n')),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/8539065/1003464"},(0,n.kt)("icon",{icon:"fa-brands fa-stack-overflow",size:"lg"})," This is used")," to convert strings to int as well."),(0,n.kt)("h3",{id:"q-and-qq"},"q and qq"),(0,n.kt)("p",null,"You can change ",(0,n.kt)("inlineCode",{parentName:"p"},"'")," and ",(0,n.kt)("inlineCode",{parentName:"p"},'"')," using ",(0,n.kt)("inlineCode",{parentName:"p"},"q")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"qq")," operator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-perl"},'my $var = "Hello World from \\"$_\\"";\nmy $easy_var = qq\\Hello World from "$_"\\;\nmy $weird_syntax = qq qHello World from \\qq;\n')),(0,n.kt)("h3",{id:"-2"},"<=>"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"<=>")," (which could be a method, like ",(0,n.kt)("inlineCode",{parentName:"p"},"CompareTo")," in C#) returns ",(0,n.kt)("inlineCode",{parentName:"p"},"-1"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"0"),", or ",(0,n.kt)("inlineCode",{parentName:"p"},"1")," based on the comparison result. It's used to compare numbers, and it's used in ",(0,n.kt)("inlineCode",{parentName:"p"},"sort")," method."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-perl"},"my @sorted = sort { $a <=> $b } @unsorted;\n")),(0,n.kt)("h2",{id:"arrays-hashes-and-lists"},"Arrays, Hashes, and Lists"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Lists aren't data structures, they're just a way to group values together. They would be stored in memory either as an array or a hash when assigned to a variable.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"You can have a scalar, an array, and a hash with the same name."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-perl"},'my $var = "scalar";\nmy @var = ("array");\nmy %var = ("hash" => "value");\nprint "\\$var = $var\\n\\@var = @var\\n\\%var = %var\\n";\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"To get values out of arrays and hashes, you need to indicate the expected output type with ",(0,n.kt)("inlineCode",{parentName:"p"},"$")," (scalar), ",(0,n.kt)("inlineCode",{parentName:"p"},"@")," (array), or ",(0,n.kt)("inlineCode",{parentName:"p"},"%")," (hash) sigils prefixes, and ",(0,n.kt)("inlineCode",{parentName:"p"},"[]")," for arrays or ",(0,n.kt)("inlineCode",{parentName:"p"},"{}")," for hashes:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-perl"},'my @array = ("a", "b", "c", "d");\nmy %hash = ("a" => 1, "b" => 2, "c" => 3);\nprint "array[0] = $array[0]\\n";\nprint "hash{a} = $hash{a}\\n";\nprint qq/hash out of array = @hash{"a", "b"}\\n/;\nprint qq/array out of hash = %array{"a", "b"}\\n/;\n')),(0,n.kt)("p",{parentName:"li"},"This can get very confusing if you reuse variable names for different types:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-perl"},'my @var = ("a", "b", "c", "d");\nmy %var = ("a" => 1, "b" => 2, "c" => 3);\nmy $var = "scalar";\n\nprint "\\$var{a} = $var{a}\\n"; # prints 1\nprint "\\$var[0] = $var[0]\\n"; # prints a\nprint qq/\\@var{"a", "b"} = @var{a, b}\\n/; # prints 1 2\nprint qq/\\%var[0,1] = %var{"a", "b"}\\n/; # prints 0 => a, 1 => b\n')))))}m.isMDXComponent=!0}}]);
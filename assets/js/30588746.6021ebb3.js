"use strict";(self.webpackChunkpublic_notes=self.webpackChunkpublic_notes||[]).push([[3850],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(r),m=a,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return r?n.createElement(h,l(l({ref:t},d),{},{components:r})):n.createElement(h,l({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},444:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:10},l="Perl",i={unversionedId:"tech/oh-shit-x/perl",id:"tech/oh-shit-x/perl",title:"Perl",description:"Operators",source:"@site/docs/0100-tech/060-oh-shit-x/010-perl.md",sourceDirName:"0100-tech/060-oh-shit-x",slug:"/tech/oh-shit-x/perl",permalink:"/tech/oh-shit-x/perl",draft:!1,editUrl:"https://github.com/ahmadalli/public-notes/edit/main/docs/0100-tech/060-oh-shit-x/010-perl.md",tags:[],version:"current",lastUpdatedBy:"ahmadali shafiee",lastUpdatedAt:1691474532,formattedLastUpdatedAt:"Aug 8, 2023",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Oh Shit, X",permalink:"/tech/oh-shit-x/"},next:{title:"Internal Utilities",permalink:"/internal-utilities/"}},s={},p=[{value:"Operators",id:"operators",level:2},{value:"<code>==</code>",id:"",level:3},{value:"<code>+</code>",id:"-1",level:3},{value:"q and qq",id:"q-and-qq",level:3},{value:"&lt;=&gt;",id:"-2",level:3},{value:"Arrays, Hashes, and Lists",id:"arrays-hashes-and-lists",level:2}],d={toc:p},c="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"perl"},"Perl"),(0,a.kt)("h2",{id:"operators"},"Operators"),(0,a.kt)("p",null,"Perl has ",(0,a.kt)("a",{parentName:"p",href:"https://perldoc.perl.org/perlop"},"a lot of operators"),", and some of them are a bit weird. Here are some of them:"),(0,a.kt)("h3",{id:""},(0,a.kt)("inlineCode",{parentName:"h3"},"==")),(0,a.kt)("p",null,"These are all ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},'1 == 1\n1 == 1.0\n1 == "1"\n1 == "1.0"\n1 == "a1.0aa\\n"\n"foo" == "bar"; # because why not?\n')),(0,a.kt)("p",null,"This happens because ",(0,a.kt)("inlineCode",{parentName:"p"},"==")," is for numbers only, and strings without any numbers in them would be casted to ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", and so in Perl's world ",(0,a.kt)("inlineCode",{parentName:"p"},'"foo" == "bar"'),". For strings ",(0,a.kt)("inlineCode",{parentName:"p"},"eq")," should be used instead."),(0,a.kt)("h3",{id:"-1"},(0,a.kt)("inlineCode",{parentName:"h3"},"+")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"+")," is for numbers which is why ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," + ",(0,a.kt)("inlineCode",{parentName:"p"},"int")," returns int, even if the string isn't completely made of numbers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},'print "123aaa" + 2; # this will return 125\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/8539065/1003464"},(0,a.kt)("icon",{icon:"fa-brands fa-stack-overflow",size:"lg"})," This is used")," to convert strings to int as well."),(0,a.kt)("h3",{id:"q-and-qq"},"q and qq"),(0,a.kt)("p",null,"You can change ",(0,a.kt)("inlineCode",{parentName:"p"},"'")," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"')," using ",(0,a.kt)("inlineCode",{parentName:"p"},"q")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"qq")," operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},'my $var = "Hello World from \\"$_\\"";\nmy $easy_var = qq\\Hello World from "$_"\\;\nmy $weird_syntax = qq qHello World from \\qq;\n')),(0,a.kt)("h3",{id:"-2"},"<=>"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"<=>")," (which could be a method, like ",(0,a.kt)("inlineCode",{parentName:"p"},"CompareTo")," in C#) returns ",(0,a.kt)("inlineCode",{parentName:"p"},"-1"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"1")," based on the comparison result. It's used to compare numbers, and it's used in ",(0,a.kt)("inlineCode",{parentName:"p"},"sort")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-perl"},"my @sorted = sort { $a <=> $b } @unsorted;\n")),(0,a.kt)("h2",{id:"arrays-hashes-and-lists"},"Arrays, Hashes, and Lists"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Lists aren't data structures, they're just a way to group values together."),(0,a.kt)("li",{parentName:"ul"},"You can have a scalar, an array, and a hash with the same name.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-perl"},'my $var = "scalar";\nmy @var = ("array");\nmy %var = ("hash" => "value");\nprint "\\$var = $var\\n\\@var = @var\\n\\%var = %var\\n";\n')))))}u.isMDXComponent=!0}}]);